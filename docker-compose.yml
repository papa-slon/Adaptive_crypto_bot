version: "3.9"
services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: adaptive_bot
    env_file:
      - .env
    depends_on: []
    command: ["bash", "-c", "python -m adaptive_crypto_bot.run"]
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    links: []
    environment:
      PYTHONPATH: /app
      REDIS_HOST: redis
    healthcheck:
      test:
        - CMD
        - /docker/healthcheck.sh
      interval: 30s
      timeout: 5s
      retries: 3
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command:
      - redis-server
      - --save
      - "60"
      - "1"
      - --loglevel
      - warning
    volumes:
      - redis-data:/data
  worker:
    build:
      context: .
      target: bot
    depends_on:
      feed:
        condition: service_completed_successfully
      redis:
        condition: service_started
    environment:
      PYTHONPATH: /app
      REDIS_HOST: redis
      STRATEGY: GRID
    command:
      - python
      - -m
      - adaptive_crypto_bot.worker
    healthcheck:
      test:
        - CMD
        - /docker/healthcheck.sh
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
  feed:
    build:
      context: .
      target: bot
    depends_on:
      redis:
        condition: service_started
    environment:
      PYTHONPATH: /app
      REDIS_HOST: redis
    command:
      - python
      - -m
      - adaptive_crypto_bot.feed
    healthcheck:
      test:
        - CMD
        - /docker/healthcheck.sh
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
  risk:
    build:
      context: .
      target: bot
    depends_on:
      redis:
        condition: service_started
    command:
      - python
      - -m
      - adaptive_crypto_bot.risk.manager
    restart: unless-stopped
  api:
    build:
      context: .
      target: bot
    depends_on:
      redis:
        condition: service_started
    ports:
      - 8000:8000
    command:
      - uvicorn
      - adaptive_crypto_bot.api.server:app
      - --host
      - 0.0.0.0
      - --port
      - "8000"
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://localhost:8000/health
      interval: 30s
      timeout: 5s
      retries: 3
volumes:
  redis-data: {}
